name: Build Windows Release

on:
  release:
    types: [created]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Get release version
      id: get_version
      shell: pwsh
      run: |
        if ("${{ github.event.release.tag_name }}" -ne "") {
          $version = "${{ github.event.release.tag_name }}" -replace "^v", ""
        } else {
          # For manual triggers, use a development version
          $version = "dev-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Release version: $version"

    - name: Install dependencies
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        python ensure_all_dependencies.py

    - name: Build single-file executable
      shell: pwsh
      run: |
        python make_executable.py --onefile --skip-deps

    - name: Clean for directory build
      shell: pwsh
      run: |
        # Clean dist but preserve the single-file executable
        if (Test-Path "dist\gambit-pairing.exe") {
          Write-Host "Backing up single-file executable..."
          Move-Item "dist\gambit-pairing.exe" "gambit-pairing-onefile.exe"
        }
        if (Test-Path "dist") {
          Remove-Item -Path "dist" -Recurse -Force
        }
        if (Test-Path "build") {
          Remove-Item -Path "build" -Recurse -Force
        }
        # Restore single-file executable
        if (Test-Path "gambit-pairing-onefile.exe") {
          New-Item -ItemType Directory -Path "dist" -Force | Out-Null
          Move-Item "gambit-pairing-onefile.exe" "dist\gambit-pairing.exe"
          Write-Host "Restored single-file executable"
        }

    - name: Build single-directory executable
      shell: pwsh
      run: |
        python make_executable.py --onedir --skip-deps

    - name: Backup executables before MSI build
      shell: pwsh
      run: |
        # Create backups directory
        New-Item -ItemType Directory -Path "backups" -Force | Out-Null

        # Backup single-file executable
        if (Test-Path "dist\gambit-pairing.exe") {
          Copy-Item "dist\gambit-pairing.exe" "backups\gambit-pairing-onefile.exe"
          Write-Host "Backed up single-file executable"
        }

        # Backup single-directory executable
        if (Test-Path "dist\gambit-pairing") {
          Copy-Item -Path "dist\gambit-pairing" -Destination "backups\gambit-pairing-onedir" -Recurse
          Write-Host "Backed up single-directory executable"
        }

    - name: Build MSI installer
      shell: pwsh
      run: |
        # The make_msi.py script will clean and rebuild the onedir executable
        python make_msi.py

    - name: Restore executables after MSI build
      shell: pwsh
      run: |
        # Restore single-file executable to dist/
        if (Test-Path "backups\gambit-pairing-onefile.exe") {
          Copy-Item "backups\gambit-pairing-onefile.exe" "dist\gambit-pairing.exe"
          Write-Host "Restored single-file executable"
        }

        # Remove backups directory
        if (Test-Path "backups") {
          Remove-Item -Path "backups" -Recurse -Force
          Write-Host "Cleaned up backups"
        }

    - name: Verify build outputs
      shell: pwsh
      run: |
        Write-Host "=== Verifying build outputs ==="

        # Check single-file executable
        $onefile = "dist\gambit-pairing.exe"
        if (Test-Path $onefile) {
          $size = (Get-Item $onefile).Length / 1MB
          Write-Host "[+] Single-file executable: $onefile ($([math]::Round($size, 1)) MB)"
        } else {
          Write-Host "[x] Single-file executable not found: $onefile"
          exit 1
        }

        # Check single-directory executable
        $onedir = "dist\gambit-pairing\gambit-pairing.exe"
        if (Test-Path $onedir) {
          $size = (Get-Item $onedir).Length / 1MB
          Write-Host "[+] Single-directory executable: $onedir ($([math]::Round($size, 1)) MB)"
        } else {
          Write-Host "[x] Single-directory executable not found: $onedir"
          exit 1
        }

        # Check MSI installer
        $msi = Get-ChildItem "msi_build\*.msi" -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($msi) {
          $size = $msi.Length / 1MB
          Write-Host "[+] MSI installer: $($msi.FullName) ($([math]::Round($size, 1)) MB)"
          echo "msi_path=$($msi.FullName)" >> $env:GITHUB_ENV
          echo "msi_name=$($msi.Name)" >> $env:GITHUB_ENV
        } else {
          Write-Host "[x] MSI installer not found in msi_build directory"
          exit 1
        }

    - name: Create compressed archives and rename executables
      shell: pwsh
      run: |
        $version = "${{ steps.get_version.outputs.version }}"

        # Rename single-file executable to include version (no ZIP needed)
        $oneFileExe = "gambit-pairing-$version-win64-portable.exe"
        Copy-Item "dist\gambit-pairing.exe" $oneFileExe
        echo "onefile_exe=$oneFileExe" >> $env:GITHUB_ENV

        # Create archive for single-directory executable
        $oneDirArchive = "gambit-pairing-$version-win64-directory.zip"
        Compress-Archive -Path "dist\gambit-pairing\*" -DestinationPath $oneDirArchive -Force
        echo "onedir_archive=$oneDirArchive" >> $env:GITHUB_ENV

        Write-Host "Created release assets:"
        Write-Host "- Portable EXE: $oneFileExe"
        Write-Host "- Directory ZIP: $oneDirArchive"

    - name: Upload release assets
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ env.onefile_exe }}
          ${{ env.onedir_archive }}
          ${{ env.msi_path }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create build summary
      shell: pwsh
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $oneFileExe = "${{ env.onefile_exe }}"
        $oneDirArchive = "${{ env.onedir_archive }}"
        $msiName = "${{ env.msi_name }}"

        Write-Host "=== Build Summary for Gambit Pairing v$version ==="
        Write-Host ""
        Write-Host "Generated Assets:"
        Write-Host "- Portable Executable: $oneFileExe"
        Write-Host "  Single-file executable, run directly without installation"
        Write-Host "- Directory Executable: $oneDirArchive"
        Write-Host "  Directory-based executable with faster startup"
        Write-Host "- MSI Installer: $msiName"
        Write-Host "  Professional Windows installer with Start Menu shortcuts"
        Write-Host ""
        Write-Host "Build completed successfully at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')"
